From 6c5db2f237df8c4bedb77d7a8bc8a7df837d106e Mon Sep 17 00:00:00 2001
From: Richard Weinberger <richard@nod.at>
Date: Thu, 4 Apr 2019 00:52:40 +0200
Subject: [PATCH 06/12] KEYS: add DCP-based symmetric key subtype

Signed-off-by: Richard Weinberger <richard@nod.at>
---
 security/keys/symmetric_keys/Kconfig        |   7 +
 security/keys/symmetric_keys/Makefile       |   3 +-
 security/keys/symmetric_keys/sym_caam_key.c |   6 +-
 security/keys/symmetric_keys/sym_dcp_key.c  | 462 ++++++++++++++++++++++++++++
 4 files changed, 474 insertions(+), 4 deletions(-)
 create mode 100644 security/keys/symmetric_keys/sym_dcp_key.c

diff --git a/security/keys/symmetric_keys/Kconfig b/security/keys/symmetric_keys/Kconfig
index 946cd07a24ad..1fbe7602ae57 100644
--- a/security/keys/symmetric_keys/Kconfig
+++ b/security/keys/symmetric_keys/Kconfig
@@ -25,6 +25,13 @@ config SYMMETRIC_KEYS_CAAM_SUBTYPE
 	  This option provides support for symmetric key subtype which is
 	  wrapped and unwrapped using CAAM hardware support.
 
+config SYMMETRIC_KEYS_DCP_SUBTYPE
+	tristate "Symmetric DCP-based subtype"
+	depends on CRYPTO_DEV_MXS_DCP
+	help
+	  This option provides support for symmetric key subtype which is
+	  wrapped and unwrapped using DCP hardware support.
+
 config SYMMETRIC_KEYS_TEST
 	tristate "Symmetric test module"
 	depends on m
diff --git a/security/keys/symmetric_keys/Makefile b/security/keys/symmetric_keys/Makefile
index ea00f1ff14d2..060002a05a4c 100644
--- a/security/keys/symmetric_keys/Makefile
+++ b/security/keys/symmetric_keys/Makefile
@@ -10,5 +10,6 @@ obj-$(CONFIG_SYMMETRIC_KEYS_MEMORY_SUBTYPE) += sym_memory_key.o
 obj-$(CONFIG_SYMMETRIC_KEYS_CAAM_SUBTYPE) += sym_caam_key.o \
 	caam_keyblob.o
 
-obj-$(CONFIG_SYMMETRIC_KEYS_TEST) += test.o
+obj-$(CONFIG_SYMMETRIC_KEYS_DCP_SUBTYPE) += sym_dcp_key.o
 
+obj-$(CONFIG_SYMMETRIC_KEYS_TEST) += test.o
diff --git a/security/keys/symmetric_keys/sym_caam_key.c b/security/keys/symmetric_keys/sym_caam_key.c
index f473e68c58fb..5121adfdbd85 100644
--- a/security/keys/symmetric_keys/sym_caam_key.c
+++ b/security/keys/symmetric_keys/sym_caam_key.c
@@ -209,7 +209,7 @@ static long sym_caam_read(void *payload_crypto, char __user *buffer,
 	struct device *dev = NULL;
 
 	blob_len = p->key_len + CAAM_BLOB_OVERHEAD;
-	hex_len = (2 * blob_len) + 1;
+	hex_len = (2 * blob_len);
 	if (!buffer || buflen < hex_len)
 		return hex_len;
 
@@ -217,7 +217,7 @@ static long sym_caam_read(void *payload_crypto, char __user *buffer,
 	if (!blob)
 		return -ENOMEM;
 
-	hex_buf = kmalloc(hex_len, GFP_KERNEL);
+	hex_buf = kmalloc(hex_len + 1, GFP_KERNEL);
 	if (!hex_buf) {
 		ret = -ENOMEM;
 		goto out;
@@ -237,7 +237,7 @@ static long sym_caam_read(void *payload_crypto, char __user *buffer,
 		goto out;
 	}
 
-	hex_buf[hex_len - 1] = '\0';
+	hex_buf[hex_len] = '\0';
 	bin2hex(hex_buf, blob, blob_len);
 
 	if (copy_to_user(buffer, hex_buf, hex_len) != 0) {
diff --git a/security/keys/symmetric_keys/sym_dcp_key.c b/security/keys/symmetric_keys/sym_dcp_key.c
new file mode 100644
index 000000000000..dcc5130c3e08
--- /dev/null
+++ b/security/keys/symmetric_keys/sym_dcp_key.c
@@ -0,0 +1,462 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Symmetric cryptography DCP-based key subtype
+ *
+ * Copyright (C) 2018-2019 sigma star gmbh
+ * Written by: David Gstir <david@sigma-star.at>
+ *             Richard Weinberger <richard@sigma-star.at>
+ */
+
+#include <keys/symmetric-subtype.h>
+#include <linux/export.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/random.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/uaccess.h>
+#include <crypto/aes.h>
+#include <crypto/algapi.h>
+#include <crypto/sha.h>
+#include <crypto/skcipher.h>
+#include <crypto/aead.h>
+#include <crypto/gcm.h>
+
+struct symmetric_key_subtype sym_dcp_subtype;
+
+#define DCP_BLOB_VERSION 1
+/**
+ * struct dcp_blob_fmt - DCP BLOB format
+ *
+ * @fmt_version: Format version, currently being %1
+ * @blob_key: Random AES 128 key which is used to encrypt @payload,
+ *            @blob_key itself is encrypted with OTP device key in AES-128-ECB mode by DCP
+ * @nonce: Random nonce used for @payload encryption
+ * @payload_len: Length of the plain text @payload
+ * @payload: The payload itself, encrypted using AES-128-GCM and @blobkey,
+ *           GCM auth tag of size AES_BLOCK_SIZE is attached at the end of it.
+ *
+ * The total size of a DCP BLOB is sizeof(struct dcp_blob_fmt) + @payload_len + AES_BLOCK_SIZE.
+ */
+struct dcp_blob_fmt {
+	__u8 fmt_version;
+	__u8 blob_key[AES_KEYSIZE_128];
+	__u8 nonce[AES_KEYSIZE_128];
+	__le32 payload_len;
+	__u8 payload[0];
+} __packed;
+
+struct sym_dcp_key_payload {
+	/* XXX rcu_head as in user_key_payload needed? */
+	unsigned int key_len;
+	char key[0];
+};
+
+static int do_dcp_crypto(u8 *in, u8 *out, bool is_encrypt)
+{
+        int res = 0;
+        struct skcipher_request *req = NULL;
+        DECLARE_CRYPTO_WAIT(wait);
+        struct scatterlist src_sg, dst_sg;
+        struct crypto_skcipher *tfm;
+	u8 otp_key[AES_KEYSIZE_128] = {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+
+	tfm = crypto_alloc_skcipher("ecb-aes-dcp", 0, 0);
+        if (IS_ERR(tfm)) {
+                res = PTR_ERR(tfm);
+		pr_err("Unable to request DCP AES-ECB cipher: %i\n", res);
+                tfm = NULL;
+                goto out;
+        }
+        crypto_skcipher_set_flags(tfm, CRYPTO_TFM_REQ_FORBID_WEAK_KEYS | CRYPTO_TFM_REQ_REF_KEY);
+        req = skcipher_request_alloc(tfm, GFP_NOFS);
+        if (!req) {
+                res = -ENOMEM;
+                goto out;
+        }
+        skcipher_request_set_callback(req,
+                        CRYPTO_TFM_REQ_MAY_BACKLOG | CRYPTO_TFM_REQ_MAY_SLEEP,
+                        crypto_req_done, &wait);
+        res = crypto_skcipher_setkey(tfm, otp_key, AES_KEYSIZE_128);
+        if (res < 0)
+                goto out;
+
+        sg_init_one(&src_sg, in, AES_KEYSIZE_128);
+        sg_init_one(&dst_sg, out, AES_KEYSIZE_128);
+        skcipher_request_set_crypt(req, &src_sg, &dst_sg, AES_KEYSIZE_128, NULL);
+
+        if (is_encrypt)
+                res = crypto_wait_req(crypto_skcipher_encrypt(req), &wait);
+        else
+                res = crypto_wait_req(crypto_skcipher_decrypt(req), &wait);
+out:
+        skcipher_request_free(req);
+        crypto_free_skcipher(tfm);
+        return res;
+}
+
+static int do_aead_crypto(u8 *in, u8 *out, size_t len, u8 *key, u8 *nonce, bool is_encrypt)
+{
+	int ret;
+	struct crypto_aead *aead = NULL;
+	struct aead_request *aead_req = NULL;
+	struct scatterlist src_sg, dst_sg;
+
+        aead = crypto_alloc_aead("gcm(aes)", 0, CRYPTO_ALG_ASYNC);
+        if (IS_ERR(aead)) {
+                ret = PTR_ERR(aead);
+		pr_err("Unable to request AES-GCM cipher: %i\n", ret);
+                return ret;
+        }
+
+        ret = crypto_aead_setauthsize(aead, AES_BLOCK_SIZE);
+        if (ret < 0) {
+                pr_err("Can't set crypto auth tag len: %d\n", ret);
+                goto free_aead;
+        }
+
+	aead_req = aead_request_alloc(aead, GFP_KERNEL);
+	if (!aead_req) {
+		ret = -ENOMEM;
+                goto free_aead;
+	}
+
+	sg_init_one(&src_sg, in, len);
+	if (is_encrypt) {
+		/*
+		 * If we encrypt our buffer has extra space for the auth tag.
+		 */
+		sg_init_one(&dst_sg, out, len + AES_BLOCK_SIZE);
+	} else {
+		sg_init_one(&dst_sg, out, len);
+	}
+	aead_request_set_crypt(aead_req, &src_sg, &dst_sg, len, nonce);
+	aead_request_set_callback(aead_req, CRYPTO_TFM_REQ_MAY_SLEEP, NULL, NULL);
+	aead_request_set_ad(aead_req, 0);
+
+	if (crypto_aead_setkey(aead, key, AES_KEYSIZE_128)) {
+                pr_err("Can't set crypto AEAD key\n");
+		ret = -EINVAL;
+                goto free_req;
+	}
+
+	if (is_encrypt)
+		ret = crypto_aead_encrypt(aead_req);
+	else
+		ret = crypto_aead_decrypt(aead_req);
+
+free_req:
+	aead_request_free(aead_req);
+free_aead:
+	crypto_free_aead(aead);
+	return ret;
+}
+
+static int decrypt_blob_key(u8 *key)
+{
+	return do_dcp_crypto(key, key, false);
+}
+
+static int encrypt_blob_key(u8 *key)
+{
+	return do_dcp_crypto(key, key, true);
+}
+
+static int build_dcp_blob(u8 *payload, size_t payload_len,
+			   struct dcp_blob_fmt **blob, size_t *blob_len)
+{
+	size_t alloc_len = sizeof(struct dcp_blob_fmt) + payload_len + AES_BLOCK_SIZE;
+	struct dcp_blob_fmt *b;
+	int ret;
+
+	*blob = kzalloc(alloc_len, GFP_KERNEL);
+	if (!*blob)
+		return -ENOMEM;
+
+	*blob_len = alloc_len;
+	b = *blob;
+
+	b->fmt_version = DCP_BLOB_VERSION;
+
+	get_random_bytes(b->nonce, AES_KEYSIZE_128);
+	get_random_bytes(b->blob_key, AES_KEYSIZE_128);
+
+	ret = do_aead_crypto(payload, b->payload, payload_len, b->blob_key, b->nonce, true);
+	if (ret) {
+		pr_err("Unable to encrypt blob payload: %i\n", ret);
+		kfree(blob);
+		return ret;
+	}
+
+	ret = encrypt_blob_key(b->blob_key);
+	if (ret) {
+		pr_err("Unable to encrypt blob key: %i\n", ret);
+		kfree(blob);
+		return ret;
+	}
+
+	b->payload_len = cpu_to_le32(payload_len);
+
+	return 0;
+}
+
+static void sym_dcp_destroy(void *payload_crypto)
+{
+	struct sym_dcp_key_payload *payload = payload_crypto;
+
+	if (!payload)
+		return;
+	kzfree(payload);
+}
+
+static struct sym_dcp_key_payload *load_key(char *cmd, char *hex_payload)
+{
+	struct sym_dcp_key_payload *payload = NULL;
+	u8 *data;
+	size_t key_len;
+	size_t data_len;
+	int ret;
+	bool is_blob = true;
+	struct dcp_blob_fmt *dcp_blob;
+
+	if (strcmp(cmd, "load_plain") == 0)
+		is_blob = false;
+	else if (strcmp(cmd, "load_blob") != 0)
+		return ERR_PTR(-EINVAL);
+
+	data_len = strlen(hex_payload);
+	if (data_len % 2 != 0) {
+		pr_err("Hex key string has invalid length. Expected even number of bytes.\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	data_len /= 2;
+	data = kmalloc(data_len, GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto out_err;
+	}
+
+	ret = hex2bin(data, hex_payload, data_len);
+	if (ret)
+		goto out_err;
+
+	if (is_blob) {
+		dcp_blob = (struct dcp_blob_fmt *)data;
+
+		if (dcp_blob->fmt_version != DCP_BLOB_VERSION) {
+			pr_err("DCP blob has bad version: %i, expected %i\n", 
+				dcp_blob->fmt_version, DCP_BLOB_VERSION);
+			ret = -EINVAL;
+			goto out_err;
+		}
+
+		key_len = le32_to_cpu(dcp_blob->payload_len);
+		if (key_len > data_len) {
+			pr_err("DCP blob has bad length: %i > %i\n", key_len, data_len);
+			ret = -EINVAL;
+			goto out_err;
+		}
+
+		ret = decrypt_blob_key(dcp_blob->blob_key);
+		if (ret) {
+			pr_err("Unable to decrypt blob key: %i\n", ret);
+			goto out_err;
+		}
+	} else {
+		key_len = data_len;
+	}
+
+	payload = kmalloc(sizeof(*payload) + key_len + AES_BLOCK_SIZE,
+			  GFP_KERNEL);
+	if (!payload) {
+		ret = -ENOMEM;
+		goto out_err;
+	}
+
+	payload->key_len = key_len;
+
+	if (is_blob) {
+		ret = do_aead_crypto(dcp_blob->payload, payload->key, payload->key_len + AES_BLOCK_SIZE,
+				     dcp_blob->blob_key, dcp_blob->nonce, false);
+		if (ret) {
+			pr_err("Unwrap of DCP payload failed: %i\n", ret);
+			goto out_err;
+		}
+	} else {
+		memcpy(payload->key, data, payload->key_len);
+	}
+
+	kfree(data);
+	return payload;
+
+out_err:
+	kfree(data);
+	kfree(payload);
+	return ERR_PTR(ret);
+}
+
+static struct sym_dcp_key_payload *generate_key(unsigned int key_len)
+{
+	struct sym_dcp_key_payload *payload;
+
+	payload = kmalloc(sizeof(*payload) + key_len, GFP_KERNEL);
+	if (!payload)
+		return ERR_PTR(-ENOMEM);
+
+	payload->key_len = key_len;
+	get_random_bytes(payload->key, payload->key_len);
+
+	return payload;
+}
+
+static int sym_dcp_preparse(struct key_preparsed_payload *prep)
+{
+	int ret;
+	size_t datalen = prep->datalen;
+	char *datablob;
+	char *blob;
+	char *c;
+	struct sym_dcp_key_payload *payload;
+	long key_len;
+
+	// TODO why magic constant 32767?
+	if (datalen <= 0 || datalen > 32767 || !prep->data)
+		return -EBADMSG;
+
+	datablob = kmalloc(datalen + 1, GFP_KERNEL);
+	if (!datablob)
+		return -ENOMEM;
+	memcpy(datablob, prep->data, datalen);
+	datablob[datalen] = '\0';
+
+	blob = datablob;
+
+	/* first argument is subkey type */
+	c = strsep(&blob, " \t");
+	if (!c || strcmp(sym_dcp_subtype.name, c) != 0) {
+		ret = -EBADMSG;
+		goto out;
+	}
+
+	/* second argument is key payload in hex or keyword 'new' */
+	c = strsep(&blob, " \t");
+	if (!c) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (strcmp(c, "new") == 0) {
+		/* third argument is key length */
+		c = strsep(&blob, " \t");
+		if (!c) {
+			ret = -EINVAL;
+			goto out;
+		}
+
+		ret = kstrtoul(c, 10, &key_len);
+		if (ret < 0 || key_len < AES_KEYSIZE_128 || key_len > AES_KEYSIZE_128) {
+			ret = -EINVAL;
+			goto out;
+		}
+
+		payload = generate_key(key_len);
+	} else {
+		payload = load_key(c, blob);
+	}
+	if (IS_ERR(payload)) {
+		ret = PTR_ERR(payload);
+		goto out;
+	}
+
+	// XXX do we really need that? is datalen the correct value?
+	prep->quotalen = datalen;
+	prep->payload.data[sym_crypto] = payload;
+	prep->payload.data[sym_subtype] = &sym_dcp_subtype;
+	ret = 0;
+out:
+	kzfree(datablob);
+	return ret;
+}
+
+static long sym_dcp_read(void *payload_crypto, char __user *buffer,
+			    size_t buflen)
+{
+	struct sym_dcp_key_payload *p = payload_crypto;
+	size_t blob_len;
+	char *hex_buf = NULL;
+	size_t hex_len;
+	long ret;
+	struct dcp_blob_fmt *dcp_blob = NULL;
+	size_t dcp_blob_len;
+
+	ret = build_dcp_blob(p->key, p->key_len, &dcp_blob, &dcp_blob_len);
+	if (ret) {
+		pr_err("Building DCP blob failed: %li\n", ret);
+		goto out;
+	}
+
+	blob_len = dcp_blob_len;
+	hex_len = (2 * blob_len);
+	if (!buffer || buflen < hex_len) {
+		ret = hex_len;
+		goto out;
+	}
+
+	hex_buf = kmalloc(hex_len + 1, GFP_KERNEL);
+	if (!hex_buf) {
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	hex_buf[hex_len] = '\0';
+	bin2hex(hex_buf, dcp_blob, dcp_blob_len);
+
+	if (copy_to_user(buffer, hex_buf, hex_len) != 0) {
+		ret = -EFAULT;
+		goto out;
+	}
+
+	ret = hex_len;
+out:
+	kfree(hex_buf);
+	kfree(dcp_blob);
+	return ret;
+}
+
+static void sym_dcp_get_keyref(void *payload_crypto, const u8 **keyref_out,
+			       unsigned int *keyref_len)
+{
+	struct sym_dcp_key_payload *p = payload_crypto;
+
+	*keyref_out = p->key;
+	*keyref_len = p->key_len;
+}
+
+struct symmetric_key_subtype sym_dcp_subtype = {
+	.owner		= THIS_MODULE,
+	.name		= "dcp",
+	.destroy	= sym_dcp_destroy,
+	.preparse	= sym_dcp_preparse,
+	.read		= sym_dcp_read,
+	.get_keyref	= sym_dcp_get_keyref
+};
+EXPORT_SYMBOL_GPL(sym_dcp_subtype);
+
+static int __init sym_dcp_subtype_init(void)
+{
+	return register_symmetric_key_subtype(&sym_dcp_subtype);
+}
+
+static void __exit sym_dcp_subtype_exit(void)
+{
+	unregister_symmetric_key_subtype(&sym_dcp_subtype);
+}
+
+module_init(sym_dcp_subtype_init);
+module_exit(sym_dcp_subtype_exit);
+
+MODULE_DESCRIPTION("DCP-based symmetric key type");
+MODULE_AUTHOR("sigma star gmbh");
+MODULE_LICENSE("GPL v2");
-- 
2.13.6

