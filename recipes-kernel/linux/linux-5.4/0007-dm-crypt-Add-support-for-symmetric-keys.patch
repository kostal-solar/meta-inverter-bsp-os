From 80a5418f66808041b0a0fe1d5ef190aa1e5e9dcd Mon Sep 17 00:00:00 2001
From: Richard Weinberger <richard@nod.at>
Date: Thu, 24 Jan 2019 22:21:43 +0100
Subject: [PATCH] dm-crypt: Add support for symmetric keys

This allows us to use a key provided by CAAM.

Signed-off-by: Richard Weinberger <richard@nod.at>

---
 drivers/md/Kconfig    |  1 +
 drivers/md/dm-crypt.c | 65 ++++++++++++++++++++++++++++++++-----------
 2 files changed, 50 insertions(+), 16 deletions(-)

diff --git a/drivers/md/Kconfig b/drivers/md/Kconfig
index aa98953f4462..d2d816279a51 100644
--- a/drivers/md/Kconfig
+++ b/drivers/md/Kconfig
@@ -269,6 +269,7 @@ config DM_UNSTRIPED
 config DM_CRYPT
 	tristate "Crypt target support"
 	depends on BLK_DEV_DM
+	depends on m
 	select CRYPTO
 	select CRYPTO_CBC
 	select CRYPTO_ESSIV
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 1af82fbbac0c..2762304fb497 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -35,6 +35,10 @@
 #include <crypto/authenc.h>
 #include <linux/rtnetlink.h> /* for struct rtattr and RTA macros only */
 #include <keys/user-type.h>
+#include <keys/symmetric-type.h>
+#include <keys/symmetric-subtype.h>
+#include <linux/key-type.h>
+#include <linux/keyctl.h>
 
 #include <linux/device-mapper.h>
 
@@ -1911,6 +1915,7 @@ static int crypt_set_keyring_key(struct crypt_config *cc, const char *key_string
 	int ret;
 	struct key *key;
 	const struct user_key_payload *ukp;
+	bool global_symmetric_key = false;
 
 	/*
 	 * Reject key_string with whitespace. dm core currently lacks code for
@@ -1937,28 +1942,56 @@ static int crypt_set_keyring_key(struct crypt_config *cc, const char *key_string
 	key = request_key(key_string[0] == 'l' ? &key_type_logon : &key_type_user,
 			  key_desc + 1, NULL);
 	if (IS_ERR(key)) {
-		kzfree(new_key_string);
-		return PTR_ERR(key);
+		key = request_key(&key_type_symmetric, key_desc + 1, NULL);
+		if (IS_ERR(key)) {
+			kzfree(new_key_string);
+			return PTR_ERR(key);
+		}
+		global_symmetric_key = true;
 	}
 
 	down_read(&key->sem);
 
-	ukp = user_key_payload_locked(key);
-	if (!ukp) {
-		up_read(&key->sem);
-		key_put(key);
-		kzfree(new_key_string);
-		return -EKEYREVOKED;
-	}
+	if (!global_symmetric_key) {
+		ukp = user_key_payload_locked(key);
+		if (!ukp) {
+			up_read(&key->sem);
+			key_put(key);
+			kzfree(new_key_string);
+			return -EKEYREVOKED;
+		}
 
-	if (cc->key_size != ukp->datalen) {
-		up_read(&key->sem);
-		key_put(key);
-		kzfree(new_key_string);
-		return -EINVAL;
-	}
+		if (cc->key_size != ukp->datalen) {
+			up_read(&key->sem);
+			key_put(key);
+			kzfree(new_key_string);
+			return -EINVAL;
+		}
 
-	memcpy(cc->key, ukp->data, cc->key_size);
+		memcpy(cc->key, ukp->data, cc->key_size);
+	} else {
+		const u8 *payload;
+		unsigned int payload_len;
+
+		ret = symmetric_key_keyref(key, &payload, &payload_len);
+		if (ret) {
+			DMERR("Failed to symmetric_key_keyref: %i", ret);
+			up_read(&key->sem);
+			key_put(key);
+			kzfree(new_key_string);
+			return -EINVAL;
+		}
+
+		if (cc->key_size != payload_len) {
+			DMERR("Symmetric key payload len mismatch: %i vs %i", cc->key_size, payload_len);
+			up_read(&key->sem);
+			key_put(key);
+			kzfree(new_key_string);
+			return -EINVAL;
+		}
+
+		memcpy(cc->key, payload, payload_len);
+	}
 
 	up_read(&key->sem);
 	key_put(key);
